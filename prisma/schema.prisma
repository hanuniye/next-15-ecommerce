generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id         String      @id @default(uuid())
  name       String
  user_id    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Billboards Billboard[]
  Categories Category[]
  Sizes      Size[]
  colors     Color[]    @relation("StoreToColor")
}

model Billboard {
  id        String     @id @default(uuid())
  label     String
  imageUrl  String
  store     Store      @relation(fields: [storeId], references: [id])
  storeId   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Category  Category[]

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  name        String
  store       Store     @relation(fields: [storeId], references: [id])
  storeId     String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  billboardId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId]) //Indexing improves the performance of queries that filter or sort by this field.
  @@index([billboardId]) //Indexing improves the performance of queries that filter or sort by this field.
}

model Size {
  id        String   @id @default(uuid())
  name      String
  value     String
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId]) //Indexing improves the performance of queries that filter or sort by this field.
}

model Color {
  id        String   @id @default(uuid())
  name      String
  value     String
  store     Store    @relation("StoreToColor", fields: [storeId], references: [id])
  storeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId]) //Indexing improves the performance of queries that filter or sort by this field.
}
